---
etcd:
  version: 3.4.0
  name: "${etcd_name}"
  discovery: "${etcd_discovery}"
  initial_cluster: "${etcd_name}=https://${domain_name}:2380"
  initial_advertise_peer_urls: "https://${domain_name}:2380"
  advertise_client_urls: "https://${domain_name}:2379"
  listen_client_urls: "https://0.0.0.0:2379"
  listen_peer_urls: "https://0.0.0.0:2380"
  listen_metrics_urls: "http://0.0.0.0:2381"
  strict_reconfig_check: true
  ssl_dir: "/etc/ssl/etcd"
  trusted_ca_file: "/etc/ssl/certs/etcd/server-ca.crt"
  cert_file: "/etc/ssl/certs/etcd/server.crt"
  key_file: "/etc/ssl/certs/etcd/server.key"
  client_cert_auth: true
  peer_trusted_ca_file: "/etc/ssl/certs/etcd/peer-ca.crt"
  peer_cert_file: "/etc/ssl/certs/etcd/peer.crt"
  peer_key_file: "/etc/ssl/certs/etcd/peer.key"
  peer_client_cert_auth: true
systemd:
  units:
    - name: qemu-agent.service
      enabled: true
      contents: |
        [Unit]
        Description=QEMU Agent
        After=docker.service
        [Service]
        ExecStart=/usr/bin/docker run \
          --privileged=true \
          --cap-add=ALL \
          --net=host \
          --name=qemu-guest-agent \
          -e container=1 \
          -e HOST=/host \
          -e TERM=xterm \
          -v /dev/virtio-ports:/dev/virtio-ports \
          -v /etc/os-release:/etc/os-release:ro \
          -v /dev:/dev \
          -v /proc:/hostproc \
          -v /run/systemd:/run/systemd \
          -v /var/log/qemu-ga:/var/log/qemu-ga:rw \
          -v /var/run/docker.sock:/var/run/docker.sock:ro \
          --entrypoint qemu-ga \
          rancher/os-qemuguestagent:v2.8.1-2 \
          -- -v
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target
    - name: docker.service
      enabled: true
    - name: kubelet.path
      enabled: true
      contents: |
        [Unit]
        Description=Watch for kubeconfig
        [Path]
        PathExists=/etc/kubernetes/kubeconfig
        [Install]
        WantedBy=multi-user.target
    - name: wait-for-dns.service
      enabled: true
      contents: |
        [Unit]
        Description=Wait for DNS entries
        Wants=systemd-resolved.service
        Before=kubelet.service
        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf > /dev/null; do sleep 1; done'
        [Install]
        RequiredBy=kubelet.service
    - name: kubelet.service
      contents: |
        [Unit]
        Description=Kubelet
        Wants=rpc-statd.service
        [Service]
        Environment=KUBELET_IMAGE=docker://quay.io/poseidon/kubelet:v1.18.5
        Environment=KUBELET_CGROUP_DRIVER=cgroupfs
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/bin/mkdir -p /opt/cni/bin
        ExecStartPre=/bin/mkdir -p /var/lib/calico
        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins
        ExecStartPre=/usr/bin/bash -c "grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d > /etc/kubernetes/ca.crt"
        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid
        ExecStart=/usr/bin/rkt run \
          --uuid-file-save=/var/cache/kubelet-pod.uuid \
          --stage1-from-dir=stage1-fly.aci \
          --hosts-entry host \
          --insecure-options=image \
          --volume etc-kubernetes,kind=host,source=/etc/kubernetes,readOnly=true \
          --mount volume=etc-kubernetes,target=/etc/kubernetes \
          --volume etc-machine-id,kind=host,source=/etc/machine-id,readOnly=true \
          --mount volume=etc-machine-id,target=/etc/machine-id \
          --volume etc-os-release,kind=host,source=/usr/lib/os-release,readOnly=true \
          --mount volume=etc-os-release,target=/etc/os-release \
          --volume=etc-resolv,kind=host,source=/etc/resolv.conf,readOnly=true \
          --mount volume=etc-resolv,target=/etc/resolv.conf \
          --volume etc-ssl-certs,kind=host,source=/etc/ssl/certs,readOnly=true \
          --mount volume=etc-ssl-certs,target=/etc/ssl/certs \
          --volume lib-modules,kind=host,source=/lib/modules,readOnly=true \
          --mount volume=lib-modules,target=/lib/modules \
          --volume run,kind=host,source=/run \
          --mount volume=run,target=/run \
          --volume usr-share-certs,kind=host,source=/usr/share/ca-certificates,readOnly=true \
          --mount volume=usr-share-certs,target=/usr/share/ca-certificates \
          --volume var-lib-calico,kind=host,source=/var/lib/calico,readOnly=true \
          --mount volume=var-lib-calico,target=/var/lib/calico \
          --volume var-lib-docker,kind=host,source=/var/lib/docker \
          --mount volume=var-lib-docker,target=/var/lib/docker \
          --volume var-lib-kubelet,kind=host,source=/var/lib/kubelet,recursive=true \
          --mount volume=var-lib-kubelet,target=/var/lib/kubelet \
          --volume var-log,kind=host,source=/var/log \
          --mount volume=var-log,target=/var/log \
          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \
          --mount volume=opt-cni-bin,target=/opt/cni/bin \
          --volume etc-iscsi,kind=host,source=/etc/iscsi \
          --mount volume=etc-iscsi,target=/etc/iscsi \
          --volume usr-sbin-iscsiadm,kind=host,source=/usr/sbin/iscsiadm \
          --mount volume=usr-sbin-iscsiadm,target=/sbin/iscsiadm \
          $${KUBELET_IMAGE} -- \
          --anonymous-auth=false \
          --authentication-token-webhook \
          --authorization-mode=Webhook \
          --bootstrap-kubeconfig=/etc/kubernetes/kubeconfig \
          --cgroup-driver=$${KUBELET_CGROUP_DRIVER} \
          --client-ca-file=/etc/kubernetes/ca.crt \
          --cluster_dns=${cluster_dns_service_ip} \
          --cluster_domain=${cluster_domain_suffix} \
          --cni-conf-dir=/etc/kubernetes/cni/net.d \
          --healthz-port=0 \
          --hostname-override=${domain_name} \
          --kubeconfig=/var/lib/kubelet/kubeconfig \
          --network-plugin=cni \
          --node-labels=node.kubernetes.io/node \
          %{~ for label in compact(split(",", node_labels)) ~}
          --node-labels=${label} \
          %{~ endfor ~}
          %{~ for taint in compact(split(",", node_taints)) ~}
          --register-with-taints=${taint} \
          %{~ endfor ~}
          --pod-manifest-path=/etc/kubernetes/manifests \
          --read-only-port=0 \
          --rotate-certificates \
          --volume-plugin-dir=/var/lib/kubelet/volumeplugins
        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid
        Restart=always
        RestartSec=5
        [Install]
        WantedBy=multi-user.target

storage:
  directories:
    - path: /etc/kubernetes
      filesystem: root
      mode: 0755
  files:
    - path: /etc/hostname
      filesystem: root
      mode: 0644
      contents:
        inline:
          ${domain_name}
    - path: /etc/sysctl.d/max-user-watches.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          fs.inotify.max_user_watches=16184
passwd:
  users:
    - name: core
      ssh_authorized_keys:
        - ${ssh_authorized_key}
locksmith:
  reboot_strategy: "etcd-lock"
  window_start:    "Sun 1:00"
  window_length:   "2h"
networkd:
  units:
    - name: 00-eth0.network
      contents: |
        [Match]
        Name=eth0

        [Network]
        DHCP=no
        DNS=${dns}
        Address=${address}
        [Route]
        Gateway=${gateway}
        GatewayOnlink=yes
